#!/usr/bin/python

# Author: LeonXie
# Date: 2013-05-18
# Parameters: 1) linfo_level2
#	      2) lactivity_level2
#	      3) target bug ID
#	      4) product conversion

import sys
import leon_lib as lib

sep = ','

targetID = sys.argv[3]

curDict = {'status':'', 'product':'', 'resolution':''}
# get current value
seenTarget = False
def read_linfo_level2_body(header, raw, curline):
	global seenTarget
	
	bugID = raw[header['bug_id']]
	if bugID != targetID:
		# if seen target and it is not target now, skip the rest
		if seenTarget:
			return -1
		else:
			return 0
	seenTarget = True
	field = raw[header['field']]
	if curDict.has_key(field):
		curDict[field] = raw[header['what']]

# read linfo_level2
lib.read_file(sys.argv[1], lib.empty_header, read_linfo_level2_body)

if not seenTarget:
	print 'False' + sep + 'who' + sep + 'when' + sep + 'noSuchBug'
	sys.exit(1)

if curDict['status'] == 'RESOLVED' or curDict['status'] == 'VERIFIED' or curDict['status'] == 'CLOSED':
#	print 'False,who,when,' + curDict['status']
#	sys.exit(1)
	pass

# prepare read activity to find out who@when set the current value
actList = []
seenTarget = False
def read_activity_level2_body(header, raw, curline):
	global seenTarget
	global actList

	bugID = raw[header['bug_id']]
	if bugID != targetID:
		# if seen target and it is not target now, skip the rest
		if seenTarget:
			return -1
		else:
			return 0
	seenTarget = True

	field = raw[header['what']].lower()
	if curDict.has_key(field):
		# create new pack
		newPack = lib.infopack()
		newPack.time = int(raw[header['when']])
		newPack.field = field
		newPack.data = raw[header['new']]
		newPack.who = raw[header['who']]
		actList.append(newPack)

# read activity level2
lib.read_file(sys.argv[2], lib.empty_header, read_activity_level2_body)

# reverse sort by time
def act_pack_cmp(e1, e2):
	return e1.time - e2.time

actList = sorted(actList, act_pack_cmp , reverse = True)

# scan throught list
targetAct = None
for act in actList:
	if act.field == 'status' and act.data == 'NEW':
		# cur value generated by confirmation
		targetAct = act
		break
	elif act.field == 'product':
		# cur value generated by modification
		targetAct = act
		break
	elif act.field == 'status' and act.data == 'RESOLVED' and curDict['resolution'] == 'FIXED':
		# cur value generated by directly fixing
		targetAct = act
		break
# confirm
confirmAct = None
if curDict['status'] == 'NEW':
	for act in actList:
		if act.field == 'status' and act.data == 'NEW':
			confirmAct = act

out = ''
if None == targetAct:
	out += 'False' + sep + 'login' + sep + 'when' + sep + 'notTriaged'
else:
	# read product convertion
	convertion = lib.product_convertion()
	convertion.read_product_convertion(sys.argv[4])
	out += 'True' + sep + targetAct.who + sep + str(targetAct.time) + sep + convertion.rename(curDict['product'])
	#print 'here'
	#print '<'+curDict['product']+'>'
	#print convertion.rename_list 

#if None == confirmAct:
#	out += sep + 'False' + sep + 'login' + sep + 'when' + sep + 'notInNEW'
#else:
#	out += sep + 'True' + sep + confirmAct.who + sep + str(confirmAct.time) + sep + curDict['status']

print out
